using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Windows.Forms;
using RJWynn.Debugging;
using RJWynn.Forms;
using System.Drawing.Printing;
using System.Configuration;
using System.Reflection;
using System.Diagnostics;
using System.Net;

namespace MyCookbook
{
    //NEW_FEATURE: Custom Units
    //NEW_FEATURE: Import cookbook into other cookbook]

    public partial class MainForm : Form
    {
        private int recipeWidth, recipeHeight;

        public string VERSION_ID = Assembly.GetExecutingAssembly().GetName().Version.ToString();

        private TreeNode currentCookbookNode = null;    //Current user selected cookbook
        private TreeNode currentTypeNode = null;        //Current user selected type
        private int currentSelectedRecipeIndex = -1;    //Index used in loadedRecipes for the current selected recipe
        bool nodeIsEditing = false;

        public bool needSave = false;

        Bitmap[] memoryImage;
        int pageCounter;

        string delimiter = @""",""";    // Equals ","

        private List<Recipe> loadedRecipes = new List<Recipe>();

        private string filePath = null;
        public string documentsPath;
        public string appDataPath;
        public string configPath;

        private bool closedForUpdate;        

        public bool[] settings;

        private Dictionary<string, string> cookbookFileLocations = new Dictionary<string, string>();


        public MainForm()
        {
            //Creates a directory to store the cookbooks in
            documentsPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + @"\MyCookbook";

            if (!System.IO.Directory.Exists(documentsPath + @"\Cookbooks"))
                System.IO.Directory.CreateDirectory((documentsPath + @"\Cookbooks"));
            documentsPath += @"\Cookbooks";


            RJWynn.Debugging.MyDebug.Initialize(true, documentsPath);

            InitializeComponent();  //Calls the VS autogenerated code in the other partial class.

            int width, height;

            appDataPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\MyCookbook";
            configPath = appDataPath + @"\MyCookbook.exe.config";

            if (!System.IO.File.Exists(configPath))
            {
                MyDebug.Error("Config file missing, copying from file location", "MainForm", 69);
                File.Copy("MyCookbook.exe.config", configPath);
            }

            closedForUpdate = this.checkAndTryUpdate();

            if (!closedForUpdate)
            {
                ExeConfigurationFileMap map = new ExeConfigurationFileMap { ExeConfigFilename = configPath };
                Configuration config = ConfigurationManager.OpenMappedExeConfiguration(map, ConfigurationUserLevel.None);

                try
                {
                    MyDebug.Print("Reading config width and height");

                    if (!config.AppSettings.Settings.AllKeys.Contains("Width"))
                    {
                        MyDebug.Warn("Width doesn't exist. Setting to 1080", "MainForm");
                        config.AppSettings.Settings.Add("Width", "1080");
                    }

                    if (!config.AppSettings.Settings.AllKeys.Contains("Height"))
                    {
                        MyDebug.Warn("Height doesn't exist. Setting to 720", "MainForm");
                        config.AppSettings.Settings.Add("Height", "720");
                    }



                    MyDebug.Print(config.AppSettings.Settings["Width"].Value + " " + config.AppSettings.Settings["Height"].Value);
                    width = Convert.ToInt32(config.AppSettings.Settings["Width"].Value);
                    height = Convert.ToInt32(config.AppSettings.Settings["Height"].Value);

                    MyDebug.Print("Reading config Settings");
                    List<bool> temp = new List<bool>();
                    if (config.AppSettings.Settings.AllKeys.Contains("Settings"))
                    {
                        MyDebug.Print("Settings: " + config.AppSettings.Settings["Settings"].Value);
                        foreach (char c in config.AppSettings.Settings["Settings"].Value)
                        {
                            if (c == '0')
                                temp.Add(false);
                            else
                                temp.Add(true);
                        }
                    }
                    else
                    {
                        MyDebug.Warn("Settings doesn't exist. Setting to equal 0", "MainForm");
                        config.AppSettings.Settings.Add("Settings", "0");
                        temp.Add(false);
                    }

                    settings = temp.ToArray();

                    MyDebug.Print("Reading config path");
                    if (!config.AppSettings.Settings.AllKeys.Contains("Path"))
                    {
                        MyDebug.Warn("Path doesn't exist. Setting to " + documentsPath, "MainForm");
                        config.AppSettings.Settings.Add("Path", documentsPath);
                    }

                    
                }
                catch
                {
                    width = 1080;
                    height = 720;
                    config.AppSettings.Settings.Clear();
                    config.AppSettings.Settings.Add("Width", "1080");
                    config.AppSettings.Settings.Add("Height", "720");
                    config.AppSettings.Settings.Add("Path", documentsPath);
                    config.AppSettings.Settings.Add("Settings", "0");
                    MyDebug.Error("Configuration Read Fail", "Form1", 51);
                    MyDebug.Error("Generating Config File", "Form1", 51);
                }

                saveFileDialog.InitialDirectory = config.AppSettings.Settings["Path"].Value;
                openFileDialog.InitialDirectory = config.AppSettings.Settings["Path"].Value;

                config.Save(ConfigurationSaveMode.Modified);

                this.Size = new System.Drawing.Size(width, height);

                //Defines the size of the region used for displaying recipes
                recipeWidth = this.ClientSize.Width - cookbookTree.Right;
                recipeHeight = cookbookTree.Height - 10;
                this.searchBar1.searchBarTextBox.Click += SearchBarTextBox_Click;
                this.searchBar1.OnSelection += SearchBar_OnSelection;
                this.searchBar1.UseSearchButton = true;
                string[] toAdd = Ingredient.OpenIngredientDatabase(appDataPath);

                if (toAdd != null)
                {
                    Ingredient.ingredientDatabase.AddRange(toAdd);
                }

                cookbookTree.NodeMouseClick += (sender, args) => cookbookTree.SelectedNode = args.Node;

                if (settings == null)
                {
                    settings = new bool[] { false };
                }

                MyDebug.Print("Reading config CookbooksLastOpen");
                if (config.AppSettings.Settings.AllKeys.Contains("CookbooksLastOpen"))
                {
                    string rawValues = config.AppSettings.Settings["CookbooksLastOpen"].Value;
                    string[] cookbookAddresses = rawValues.Split('|');
                    foreach (string address in cookbookAddresses)
                    {
                        if (File.Exists(address))
                        {
                            try
                            {
                                OpenCookbook(address);
                            }
                            catch (Exception e)
                            {
                                MyDebug.Error(e.Message, "MainForm", 150);
                                throw;
                            }
                        }
                        else
                        {
                            MyDebug.Warn("File location of cookbook trying to be opened from previous run doesn't exist", "MainForm");
                        }
                    }
                }
                else
                {
                    MyDebug.Warn("CookbooksLastOpen doesn't exist. Setting to empty", "MainForm");
                    config.AppSettings.Settings.Add("Path", "");
                }
            }
            else
            {
                this.Close();
            }       
            
        }

        
        #region Events
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Controls resizing of form
        /// </summary>
        private void Form1_Resize(object sender, EventArgs e)
        {
            cookbookTree.Height = this.ClientSize.Height - cookbookTree.Top;

            //Redefines the size of the region used for displaying recipes
            recipeWidth = this.ClientSize.Width - cookbookTree.Right;
            recipeHeight = cookbookTree.Height;

            searchBar1.Location = new Point(this.ClientSize.Width - searchBar1.Width, searchBar1.Top);

            if (currentSelectedRecipeIndex != -1)
                loadedRecipes[currentSelectedRecipeIndex].ResizeRecipe(recipeWidth, recipeHeight);
        }
        

        private void SearchBar_OnSelection(object sender, EventArgs e)
        {
            string name = searchBar1.Selected.ToString();
            if (!name.Contains("Ing: "))
            {
                foreach (Recipe rec in loadedRecipes)
                {
                    if (rec.recipeName == name)
                    {
                        SelectRecipe(rec);
                        searchBar1.ClearItems();
                        break;
                    }
                }
            }
            else
            {
                name = name.Substring(5);
                string recipesWithIng = "";
                foreach (Recipe rec in loadedRecipes)
                {
                    foreach(Ingredient ing in rec.ingredientList)
                    {
                        if(ing.name == name)
                        {
                            recipesWithIng += rec.recipeName + "\n";
                        }
                    }
                }
                string caption = "Recipes containing ingredient: " + name;
                MessageBoxButtons buttons = MessageBoxButtons.OK;

                MessageBox.Show(recipesWithIng, caption, buttons);
                searchBar1.ClearItems();

            }
        }


        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (!closedForUpdate)
            {
                MyDebug.Print("Saving Ingredients to databse");
                Ingredient.SaveIngredientDatabase(appDataPath);
                MyDebug.Print("Ingredients saved!");

                MyDebug.Print("Saving Config Settings");
                ExeConfigurationFileMap map = new ExeConfigurationFileMap { ExeConfigFilename = configPath };
                Configuration config = ConfigurationManager.OpenMappedExeConfiguration(map, ConfigurationUserLevel.None);

                config.AppSettings.Settings["Width"].Value = this.Width.ToString();
                config.AppSettings.Settings["Height"].Value = this.Height.ToString();
                if (filePath != null)
                    config.AppSettings.Settings["Path"].Value = filePath;

                //Takes each string and combines them with the | delimiter
                string lastOpenCookbooks = string.Join("|", cookbookFileLocations.Values);

                if (config.AppSettings.Settings.AllKeys.Contains("CookbooksLastOpen"))
                {
                    config.AppSettings.Settings["CookbooksLastOpen"].Value = lastOpenCookbooks;
                }
                else
                {
                    config.AppSettings.Settings.Add("CookbooksLastOpen", lastOpenCookbooks);
                }

                string toSaveSettings = "";

                foreach (bool flag in settings)
                {
                    if (flag)
                        toSaveSettings += "1";
                    else
                        toSaveSettings += "0";
                }
                config.AppSettings.Settings["Settings"].Value = toSaveSettings;

                config.Save();
                MyDebug.Print("Config Saved!");

                ConfigurationManager.RefreshSection("appSettings");
                MyDebug.Print(config.AppSettings.Settings["Width"].Value + " " + config.AppSettings.Settings["Height"].Value);

                MyDebug.Print("Updating Variables");
                foreach (Recipe rec in loadedRecipes)
                {
                    rec.UpdateVariables();
                    foreach (Ingredient ing in rec.ingredientList)
                    {
                        ing.UpdateVariables();
                    }
                }

                if (needSave)
                {
                    MyDebug.Print("Close Paused, Save requested");
                    string message = "Any unsaved data will be lost. Do you want to save before you quit?";
                    string caption = "Are you sure you want to quit?";
                    MessageBoxButtons buttons = MessageBoxButtons.YesNoCancel;

                    DialogResult result;

                    result = MessageBox.Show(message, caption, buttons);

                    if (result == DialogResult.Yes)
                    {
                        saveCookbook();
                        e.Cancel = needSave;
                    }
                    else if (result == DialogResult.No)
                    {
                        e.Cancel = false;
                    }
                    else
                    {
                        e.Cancel = true;
                    }
                }
            }

        }

        /// <summary>
        /// Closes Program
        /// </summary>
        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void cookbookToolStripMenuItem_Click(object sender, EventArgs e)
        {
            AddCookbook("MyCookbook");
            needSave = true;
            //MyDebug.Print("Save needed: Cookbook added");
        }

        private void typeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            AddType("Type");
            needSave = true;
        }

        /// <summary>
        /// Controls renaming of nodes
        /// </summary>
        private void cookbookTree_NodeMouseDoubleClick(object sender, TreeNodeMouseClickEventArgs e)
        {
            e.Node.BeginEdit();
            nodeIsEditing = true;
            needSave = true;
        }

        /// <summary>
        /// After node is renamed, change the nodes name to fit the text
        /// </summary>
        private void cookbookTree_AfterLabelEdit(object sender, NodeLabelEditEventArgs e)
        {
            //Changes the listings of file locations if the cookbook is renamed
            if (e.Node.Level == 0)
            {
                string oldName = e.Node.Text;
                string newName = e.Label;
                string fileLocation = cookbookFileLocations[oldName];

                cookbookFileLocations.Remove(oldName);
                cookbookFileLocations.Add(newName, fileLocation);
            }

            e.Node.Name = e.Node.Text = e.Label;
            //MyDebug.Print(e.Node.Text + " | " + e.Node.Name + " | " + e.Label);
            nodeIsEditing = false;
        }

        /// <summary>
        /// Selects current node/recipe depending on node clicked
        /// </summary>
        private void cookbookTree_NodeMouseClick(object sender, TreeNodeMouseClickEventArgs e)
        {
            if (e.Node.Level == 0)  //Cookbook node
            {
                currentCookbookNode = e.Node;
            }
            else if (e.Node.Level == 1) //Type node
            {
                currentTypeNode = e.Node;
            }
            else  // Recipe node
            {
                foreach (Recipe rec in loadedRecipes)
                {
                    if (rec.recipeName == e.Node.Text)
                    {
                        SelectRecipe(rec);
                    }
                }
            }

            if(e.Button == MouseButtons.Right)
            {
                MyDebug.Print("Right mouse button clicked");

                if(e.Node.Level == 0)
                {
                    ContextMenuStrip treeRecipeContextMenuStrip = new ContextMenuStrip();
                    ToolStripMenuItem closeToolStripMenuItem = new ToolStripMenuItem("Close Cookbook", null, closeCookbook);
                    ToolStripMenuItem printToolStripMenuItem1 = new ToolStripMenuItem("Print", null, printCookbookToolStripItem_Click);

                    treeRecipeContextMenuStrip.SuspendLayout();

                    treeRecipeContextMenuStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
                        closeToolStripMenuItem,
                        printToolStripMenuItem1}
                    );
                    treeRecipeContextMenuStrip.Name = "treeContextMenuStrip";
                    treeRecipeContextMenuStrip.Size = new System.Drawing.Size(176, 92);
                    
                    treeRecipeContextMenuStrip.ResumeLayout(false);
                    treeRecipeContextMenuStrip.Show(cookbookTree, e.Location);
                }

                if (e.Node.Level == 2)
                {
                    ContextMenuStrip treeRecipeContextMenuStrip = new ContextMenuStrip();
                    ToolStripMenuItem moveToNewTypeToolStripMenuItem = new ToolStripMenuItem("Move to other type", null);
                    ToolStripMenuItem deleteToolStripMenuItem = new ToolStripMenuItem("Delete", null, deleteNode);
                    ToolStripMenuItem printToolStripMenuItem1 = new ToolStripMenuItem("Print", null, printFromRightClick);

                    treeRecipeContextMenuStrip.SuspendLayout();

                    treeRecipeContextMenuStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
                        moveToNewTypeToolStripMenuItem,
                        deleteToolStripMenuItem,
                        printToolStripMenuItem1}
                    );
                    treeRecipeContextMenuStrip.Name = "treeContextMenuStrip";
                    treeRecipeContextMenuStrip.Size = new System.Drawing.Size(176, 92);
                    

                    foreach (TreeNode type in currentCookbookNode.Nodes)
                    {
                        moveToNewTypeToolStripMenuItem.DropDownItems.Add(type.Name, null, ChangeType_Click);
                    }


                    treeRecipeContextMenuStrip.ResumeLayout(false);
                    treeRecipeContextMenuStrip.Show(cookbookTree, e.Location);
                }
            }

        }

        private void closeCookbook(object sender, EventArgs e)
        {
            DialogResult result = DialogResult.None;
            if (needSave)
            {
                string message = "Are you sure you want to close this cookbook without saving?\nAnything that is not saved will be lost";

                string caption = "Are you sure?";
                MessageBoxButtons buttons = MessageBoxButtons.YesNoCancel;                

                result = MessageBox.Show(message, caption, buttons);
            } 

            if (!needSave || result == DialogResult.Yes)
            {
                MyDebug.Print("Closing Cookbook: " + currentCookbookNode.Text);
                try
                {
                    MyDebug.Print("Clearing Location");
                    cookbookFileLocations.Remove(currentCookbookNode.Text);
                    if (loadedRecipes.Count > 0)
                    {
                        MyDebug.Print("Getting the indexes for the recipes to remove");
                        for(int i = 0; i < loadedRecipes.Count; i++)
                        {
                            Recipe rec = loadedRecipes[i];
                            if (rec.node.Parent.Parent == currentCookbookNode)
                            {
                                MyDebug.Print("Closing recipe: " + rec.recipeName);
                                if (i == currentSelectedRecipeIndex)
                                {
                                    currentSelectedRecipeIndex = -1;
                                }
                                rec.node.Remove();
                                rec.SetVisible(false);

                                loadedRecipes.RemoveAt(i);
                                i--;
                            }
                        }

                    }

                    MyDebug.Print("Removing node");
                    currentCookbookNode.Remove();

                    if (loadedRecipes.Count > 0)
                    {
                        Recipe.ResetIndex();
                        foreach (Recipe rec in loadedRecipes)
                        {
                            rec.ReloadRecipeIndex();
                            MyDebug.Print("Recipe: " + rec + " index set to " + rec.index);
                        }
                    }
                }
                catch (Exception ex)
                {
                    MyDebug.Error(ex.Message, "closeCookbook", 550);
                    string message = "Something went wrong";

                    string caption = "Uh oh";
                    MessageBoxButtons buttons = MessageBoxButtons.OK;

                    MessageBox.Show(message, caption, buttons);
                }
                
            }

        }

        private void ChangeType_Click(object sender, EventArgs e)
        {
            ToolStripItem item = (ToolStripItem)sender;
            Recipe currentRec = loadedRecipes[currentSelectedRecipeIndex];
            int recipeToRemove = currentSelectedRecipeIndex;

            TreeNode treeNodeChild = new TreeNode(currentRec.recipeName);
            treeNodeChild.Name = currentRec.recipeName;
            treeNodeChild.Text = currentRec.recipeName;

            MyDebug.Print(currentTypeNode.Name);
            currentCookbookNode.Nodes.Find(item.Text, false)[0].Nodes.AddRange(new TreeNode[] { treeNodeChild });
            currentCookbookNode.Nodes.Find(item.Text, false)[0].Expand();

            MyDebug.Print("Generating new recipe");
            Recipe temp = new Recipe(currentRec.recipeName, 
                                        treeNodeChild, 
                                        recipeWidth, 
                                        recipeHeight, 
                                        cookbookTree.Right, 
                                        cookbookTree.Top,
                                        currentRec.temperature,
                                        currentRec.hours,
                                        currentRec.minutes,
                                        currentRec.description,
                                        currentRec.cookingUtensil,
                                        currentRec.servings,
                                        currentRec.imageLocation,
                                        false);
            foreach(Ingredient ing in currentRec.ingredientList)
            {
                temp.AddIngredient(ing.name, ing.amount, ing.unitType);
            }
            MyDebug.Print("Adding recipe panel to form");
            this.Controls.Add(temp.recipePanel);

            MyDebug.Print("Setting selected recipe to the newly added recipe");
            currentRec.SetVisible(false);

            currentSelectedRecipeIndex = -1;
            
            temp.ResizeRecipe(recipeWidth, recipeHeight);

            temp.SetVisible(true);

            cookbookTree.SelectedNode = temp.node;

            MyDebug.Print("Adding recipe to recipe list");
            loadedRecipes.Add(temp);
            needSave = true;

            currentRec.node.Remove();
            loadedRecipes.RemoveAt(recipeToRemove);

            if (loadedRecipes.Count > 0)
            {
                Recipe.ResetIndex();
                foreach (Recipe rec in loadedRecipes)
                {
                    rec.ReloadRecipeIndex();
                    MyDebug.Print("Recipe: " + rec + " index set to " + rec.index);
                }
            }

        }

        private void deleteNode(object sender, EventArgs e)
        {
            string message;
            if (cookbookTree.SelectedNode == currentCookbookNode)
            {
                message = "Are you sure you want to delete this cookbook and everything inside it?\nOnce it is deleted it cannot be recovered";
            }
            else if (cookbookTree.SelectedNode == currentTypeNode)
            {
                message = "Are you sure you want to delete this type and everything inside it?\nOnce it is deleted it cannot be recovered";
            }
            else if (cookbookTree.SelectedNode == loadedRecipes[currentSelectedRecipeIndex].node)
            {
                message = "Are you sure you want to delete this recipe?\nOnce it is deleted it cannot be recovered";
            }
            else
            {
                MyDebug.Error("Couldn't find current selected node!", "cookbookTree_KeyDown", 811);
                return;
            }



            string caption = "Are you sure?";
            MessageBoxButtons buttons = MessageBoxButtons.YesNoCancel;
            DialogResult result;

            result = MessageBox.Show(message, caption, buttons);


            if (result == DialogResult.Yes)
            {
                if (cookbookTree.SelectedNode == currentCookbookNode)
                {
                    MyDebug.Print("Deleting Cookbook: " + currentCookbookNode.Text);
                    cookbookFileLocations.Remove(currentCookbookNode.Text);
                    if (loadedRecipes.Count > 0)
                    {
                        List<int> toRemove = new List<int>();
                        foreach (Recipe rec in loadedRecipes)
                        {
                            if (rec.node.Parent.Parent == currentTypeNode)
                            {
                                toRemove.Add(rec.index);
                            }
                        }
                        if (toRemove.Count > 0)
                        {
                            foreach (int index in toRemove)
                            {
                                MyDebug.Print("Deleting recipe: " + loadedRecipes[index].recipeName);
                                loadedRecipes[index].node.Remove();
                                loadedRecipes[index].SetVisible(false);
                                loadedRecipes.RemoveAt(index);
                            }
                        }

                    }
                }
                else if (cookbookTree.SelectedNode == currentTypeNode)
                {
                    List<int> toRemove = new List<int>();
                    if (loadedRecipes.Count > 0)
                    {
                        foreach (Recipe rec in loadedRecipes)
                        {
                            if (rec.node.Parent == currentTypeNode)
                            {
                                toRemove.Add(rec.index);
                            }
                        }
                        if (toRemove.Count > 0)
                        {
                            foreach (int index in toRemove)
                            {
                                MyDebug.Print("Deleting recipe: " + loadedRecipes[index].recipeName);
                                loadedRecipes[index].node.Remove();
                                loadedRecipes[index].SetVisible(false);
                                loadedRecipes.RemoveAt(index);
                            }
                        }
                    }
                }
                else
                {
                    MyDebug.Print("Deleting recipe: " + loadedRecipes[currentSelectedRecipeIndex].recipeName);
                    loadedRecipes[currentSelectedRecipeIndex].SetVisible(false);
                    loadedRecipes.RemoveAt(currentSelectedRecipeIndex);
                }

                cookbookTree.SelectedNode.Remove();
                currentSelectedRecipeIndex = -1;

                if (loadedRecipes.Count > 0)
                {
                    Recipe.ResetIndex();
                    foreach (Recipe rec in loadedRecipes)
                    {
                        rec.ReloadRecipeIndex();
                        MyDebug.Print("Recipe: " + rec + " index set to " + rec.index);
                    }
                }

                needSave = true;
            }
        
    }

        private void saveToolStripMenuItem_Click(object sender, EventArgs e)
        {
            saveCookbook();
        }

        private void openToolStripMenuItem_Click(object sender, EventArgs e)
        {
            OpenCookbook();
        }



        /// <summary>
        /// Prevents semicolon being used in a node name
        /// </summary>
        private void cookbookTree_KeyPress(object sender, KeyPressEventArgs e)
        {
            EventControls.IgnoreKeyPress(e, '"');
        }

        /// <summary>
        /// Prevents user from adding a recipe if there is no cookbook or type
        /// </summary>
        private void recipeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (currentCookbookNode != null)
            {
                if (currentTypeNode != null)
                {
                    AddRecipe("Recipe");
                    needSave = true;
                }
                else
                {
                    string message = "You did not select or add a type to add the recipe into";
                    string caption = "Error Adding Recipe";
                    MessageBoxButtons buttons = MessageBoxButtons.OK;
                    //DialogResult result;

                    // Displays the MessageBox.

                    MessageBox.Show(message, caption, buttons);

                }
            }
            else
            {
                string message = "You did not select or add a cookbook to add the recipe into";
                string caption = "Error Adding Recipe";
                MessageBoxButtons buttons = MessageBoxButtons.OK;
                //DialogResult result;

                // Displays the MessageBox.

                MessageBox.Show(message, caption, buttons);

            }

        }

        private void importToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.openFileDialog.DefaultExt = "csv";
            this.openFileDialog.Filter = "Csv files (.csv)|*.csv";
            try
            {
                OpenCookbook();
                needSave = true;
            }
            catch (Exception err)
            {
                string message = "The import failed. The file imported was not intended to be used for this program.";
                string caption = "Import file error";
                MessageBoxButtons buttons = MessageBoxButtons.OK;

                MessageBox.Show(message, caption, buttons);
                MyDebug.Error("Import Fail: " + err.Message, "ImportToolStripMenuItem_Click", 240);
            }

            this.openFileDialog.DefaultExt = "ckbk";
            this.openFileDialog.Filter = "Cookbook files (.ckbk)|*.ckbk";
        }

        private void SearchBarTextBox_Click(object sender, EventArgs e)
        {
            MyDebug.Print("SearchBarKeyDown");
            searchBar1.ClearItems();
            foreach (Recipe rec in loadedRecipes)
            {
                searchBar1.AddItem(rec.recipeName);
            }

            if(settings[0])
            {
                foreach (string ing in Ingredient.ingredientDatabase)
                {
                    searchBar1.AddItem("Ing: " + ing);
                }
            }
        }

        private void cookbookTree_KeyDown(object sender, KeyEventArgs e)
        {

            if (!nodeIsEditing)
            {
                if (e.KeyCode == Keys.Delete)
                {
                    deleteNode(null, null);

                }
            }
        }

        private void toolStripInfoButton_Click(object sender, EventArgs e)
        {
            using (AboutBox1 box = new AboutBox1())
            {
                box.ShowDialog(this);
            }
        }

        private void settingsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SettingsDialog settingDialog = new SettingsDialog(settings);
            settingDialog.ShowDialog();
            settings = settingDialog.ReturnSettings;
        }


        private void recipeFromWebsiteToolStripMenuItem_Click(object sender, EventArgs e)
        {
            WebPageUrlRequestDialog urlDialog = new WebPageUrlRequestDialog();
            urlDialog.ShowDialog();
            string url = urlDialog.urlTextBox.Text;

            string[] parsedData;

            try
            {
                MyDebug.Print("Parsing URL");
                parsedData = WebParser.ParseSite(url);

                string name = parsedData[0];
                string img = parsedData[1].Split(WebParser.SEPERATOR)[1];

                string picturePath = "";

                MyDebug.Print("Saving Image");

                try
                {
                    if (!System.IO.Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\MyCookbook\Pictures\"))
                        System.IO.Directory.CreateDirectory((Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\MyCookbook\Pictures\"));

                    picturePath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\MyCookbook\Pictures\" + name + img.Substring(img.Length - 4, 4);

                    using (WebClient client = new WebClient())
                    {
                        client.DownloadFile(img, picturePath);
                    }
                }
                catch 
                {

                }
                

                MyDebug.Print("Seperating Array");
                bool onSteps = false;
                List<string> ingredients = new List<string>();
                string steps = "";
                for (int i = 2; i < parsedData.Length; i++)
                {
                    if(onSteps)
                    {
                        steps = steps + parsedData[i] + "\n";
                    }
                    else
                    {
                        if (parsedData[i].Equals(WebParser.STEP_SEPERATOR))
                        {
                            onSteps = true;
                        }
                        else
                        {
                            ingredients.Add(parsedData[i]);
                        }
                    }
                    
                }

                MyDebug.Print("Adding Recipe");
                AddRecipe(name, 0, 0, 0, steps, "", 0, picturePath, false);
                needSave = true;

                MyDebug.Print("Adding ingredients");
                foreach (string s in ingredients)
                {
                    if (s.Contains(WebParser.SEPERATOR))
                    {
                        string[] split = s.Split(WebParser.SEPERATOR);
                        loadedRecipes.Last().AddIngredient(split[1], split[0], "");
                    }
                    else
                    {
                        loadedRecipes.Last().AddIngredient(s, "", "");
                    }
                }
                SelectRecipe(loadedRecipes.Last());
            }
            catch (Exception ex)
            {
                string message = "The site you entered was unable to be read.";
                string caption = "Parsing Error";
                MessageBoxButtons buttons = MessageBoxButtons.OK;

                MessageBox.Show(message, caption, buttons);

                MyDebug.Error(ex.Message, ex.Source, 899);
            }
        }


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        #endregion Events


        #region Treenode add functions
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Adds a node to the tree for a new cookbook. Sets <paramref name="currentCookbookNode"/> to the newly added cookbook
        /// </summary>
        /// <param name="name">Cookbook name</param>
        private void AddCookbook(string name)
        {
            TreeNode treeNode = new TreeNode(name);

            treeNode.Name = name;
            treeNode.Text = name;
            cookbookTree.Nodes.AddRange(new System.Windows.Forms.TreeNode[] { treeNode });

            currentCookbookNode = treeNode;
            needSave = true;
        }

        /// <summary>
        /// Adds a node to the tree for a new type. Sets <paramref name="currentTypeNode"/> to the newly added type.
        /// </summary>
        /// <param name="name">Type name</param>
        /// <example>Dessert</example>
        private void AddType(string name)
        {
            TreeNode treeNodeChild = new TreeNode(name);

            treeNodeChild.Name = name;
            treeNodeChild.Text = name;
            currentCookbookNode.Nodes.AddRange(new TreeNode[] { treeNodeChild });
            currentCookbookNode.Expand();

            currentTypeNode = treeNodeChild;
            needSave = true;
        }

        /// <summary>
        /// Adds a node to the tree for a new recipe. Sets the visible recipe to the newly added recipe.
        /// </summary>
        /// <param name="name">Recipe name</param>
        public void AddRecipe(string name)
        {
            TreeNode treeNodeChild = new TreeNode(name);

            treeNodeChild.Name = name;
            treeNodeChild.Text = name;
            currentTypeNode.Nodes.AddRange(new TreeNode[] { treeNodeChild });
            if (!currentTypeNode.IsExpanded)
            {
                currentTypeNode.Expand();
                MyDebug.Print("Expanding Type Node");
            }


            //Creates the new recipe at the default posistion and adds the panel controls to the form
            Recipe temp = new Recipe(name, treeNodeChild, recipeWidth, recipeHeight, cookbookTree.Right, cookbookTree.Top);
            this.Controls.Add(temp.recipePanel);

            //Sets the newly added recipe to visible
            SelectRecipe(temp);

            //Adds the new recipe to the recipe list.
            loadedRecipes.Add(temp);
            needSave = true;

        }

        /// <summary>
        /// Used to load a recipe when opening a cookbook.
        /// </summary>
        /// <param name="name">Recipe name</param>
        /// <param name="temperature">Temperature to cook at</param>
        /// <param name="hours">Cooking time hours</param>
        /// <param name="minutes">Cooking time minutes</param>
        /// <param name="description">Instructions for preperation and cooking</param>
        /// <param name="cookingUtensil">What to cook the recipe in</param>
        /// <param name="servings">How many servings the recipe makes</param>
        /// <param name="imageLocation">File path for image</param>
        /// <param name="addFirstIngredient">If true it generates a new ingredient</param>
        public void AddRecipe(string name, int temperature, byte hours, float minutes, string description, string cookingUtensil, float servings, string imageLocation, bool addFirstIngredient)
        {

            TreeNode treeNodeChild = new TreeNode(name);
            treeNodeChild.Name = name;
            treeNodeChild.Text = name;

            MyDebug.Print(currentTypeNode.Name);
            currentTypeNode.Nodes.AddRange(new TreeNode[] { treeNodeChild });
            currentTypeNode.Expand();

            MyDebug.Print("Generating new recipe");
            Recipe temp = new Recipe(name, treeNodeChild, recipeWidth, recipeHeight, cookbookTree.Right, cookbookTree.Top, temperature, hours, minutes, description, cookingUtensil, servings, imageLocation, addFirstIngredient);

            MyDebug.Print("Adding recipe panel to form");
            this.Controls.Add(temp.recipePanel);

            MyDebug.Print("Adding recipe to recipe list");
            loadedRecipes.Add(temp);

            MyDebug.Print("Setting selected recipe to the newly added recipe");
            SelectRecipe(temp);
            
            needSave = true;
        }
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        #endregion Treenode add functions


        #region CookbookIO
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        public void saveCookbook()
        {

            Stream myStream;


            byte[] quoteByte = Recipe.GetBytes("\"");

            if (currentCookbookNode != null)
            {
                saveFileDialog.FileName = currentCookbookNode.Text;    //Sets the file name to be saved equal to the cookbook's name

                if (saveFileDialog.ShowDialog() == DialogResult.OK)    //Shows save dialog popup and verifys that user hit save
                {
                    filePath = System.IO.Path.GetDirectoryName(saveFileDialog.FileName);

                    cookbookFileLocations[currentCookbookNode.Text] = saveFileDialog.FileName;             

                    if ((myStream = saveFileDialog.OpenFile()) != null)    //Opens byte stream to write file
                    {
                        //Use of the Recipe.GetBytes() soly converts a string to a byte[]
                        //It has nothing to do with the recipe. It was just where it was first implemented.

                        //Use of "," as delimiter (seperator) for the data.

                        byte[] versionID = Recipe.GetBytes(@"""Version: " + VERSION_ID + delimiter);
                        myStream.Write(versionID, 0, versionID.Length);

                        //Write cookbookname to the file
                        byte[] cookbookName = Recipe.GetBytes(currentCookbookNode.Text + delimiter);
                        myStream.Write(cookbookName, 0, cookbookName.Length);

                        //Writes the amount of types there are in the cookbook
                        byte[] typeNodeCount = Recipe.GetBytes(currentCookbookNode.Nodes.Count.ToString());
                        myStream.Write(typeNodeCount, 0, typeNodeCount.Length);



                        //Loops through the type nodes and prints their name and amount of recipes in them
                        foreach (TreeNode node in currentCookbookNode.Nodes)
                        {
                            byte[] typeNodeNameAndCount = Recipe.GetBytes(delimiter + node.Text + delimiter + node.Nodes.Count);
                            myStream.Write(typeNodeNameAndCount, 0, typeNodeNameAndCount.Length);
                        }


                        myStream.Write(quoteByte, 0, quoteByte.Length);

                        //Loops through all of the recipes and adds them to the file if they are part of the cookbook
                        foreach (Recipe rec in loadedRecipes)
                        {
                            if (rec.node.Parent.Parent == currentCookbookNode)  //Verifys the recipe is in the cookbook
                            {
                                ///
                                ///<see cref="Recipe.ToByteArray()"/>
                                ///
                                byte[] recipe = rec.ToByteArray();
                                myStream.Write(recipe, 0, recipe.Length);
                            }

                        }

                        myStream.Close();


                        foreach (Recipe rec in loadedRecipes)
                        {
                            foreach (Ingredient ing in rec.ingredientList)
                            {
                                if (!Ingredient.ingredientDatabase.Contains(ing.name) && ing.name != "Ingredient Name")
                                {
                                    Ingredient.ingredientDatabase.Add(ing.name);
                                }
                            }
                        }



                    }
                    needSave = false;
                }

                
            }
            else
            {
                string message = "There is not a recipe open to save";
                string caption = "Save error";
                MessageBoxButtons buttons = MessageBoxButtons.OK;

                MessageBox.Show(message, caption, buttons);
            }
        }

        public void OpenCookbook()
        {
            if (openFileDialog.ShowDialog() == DialogResult.OK)    //Opens open dialog and verifys open was selected
            {                
                OpenCookbook(openFileDialog.FileName);
            }
        }

        public void OpenCookbook(string file)
        {
            //Used to get all the bytes from the file since file size isnt known
            List<byte> fileDump = new List<byte>();

            filePath = System.IO.Path.GetDirectoryName(file);

            string backupFolder = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\MyCookbook\Backup\";

            string name = Path.GetFileNameWithoutExtension(file);

            if (!System.IO.Directory.Exists(backupFolder))
                System.IO.Directory.CreateDirectory(backupFolder);

            if (File.Exists(backupFolder + name + "-BACKUP.ckbk"))
            {
                if(!File.Exists(backupFolder + name + "-BACKUP-2.ckbk"))
                {
                    File.Create(backupFolder + name + "-BACKUP-2.ckbk").Close();                        
                }                        
                File.Replace(backupFolder + name + "-BACKUP.ckbk", backupFolder + name + "-BACKUP-2.ckbk", null);
            }

            File.Copy(file, backupFolder + name + "-BACKUP.ckbk");

            MyDebug.Print(file);
            //Reads in the byte file
            using (Stream sr = File.OpenRead(file))
            {
                int temp;
                temp = sr.ReadByte();   //ReadByte returns an int for some reason. Is casted later
                do
                {
                    fileDump.Add((byte)temp);   //Casts int into byte that was read
                    temp = sr.ReadByte();       //Reads next byte
                } while (temp != -1);   //Runs until file is empty
            }

            //fileDump.RemoveAll(EqualsNewLine);      //Removes all new line characters
            //fileDump.RemoveAt(0);                   //Removes First Quote
            //fileDump.RemoveAt(fileDump.Count - 1);  //Removes last quote


            //Converts byte list to byte array
            byte[] fileDumpByteArray = fileDump.ToArray();

            //Converts byte array to string
            //GetString is in recipe because that is where it was first implemented, not because it uses anything from recipe.
            string fileDumpString = Recipe.GetString(fileDumpByteArray);

            List<char> stringEdit = fileDumpString.ToCharArray().ToList();

            stringEdit.RemoveAll(EqualsNewLine);      //Removes all new line characters
            stringEdit.RemoveAt(0);                   //Removes First Quote
            stringEdit.RemoveAt(stringEdit.Count - 1);  //Removes last quote

            fileDumpString = new string(stringEdit.ToArray());

            MyDebug.Print(delimiter);

            //Splits the string into an array based of the seperator semicolon
            string[] args = fileDumpString.Split(new string[] { delimiter }, StringSplitOptions.None);

            MyDebug.Print(fileDumpString);



            //Verifys file isnt empty
            if (args.Length > 0)
            {
                string versionID;

                //Find version ID
                MyDebug.Print("Checking version ID");
                versionID = args[0].Substring(((@"""Version: ").Length - 1));
                MyDebug.Print(args[0]);
                switch (versionID[0])
                {
                    case '1':
                        OpenCookbookVersion1(args, file);
                        break;

                    default:
                        string message = "The file failed to be read. The version number is not an accepted value.";
                        string caption = "Open file error";
                        MessageBoxButtons buttons = MessageBoxButtons.OK;

                        MessageBox.Show(message, caption, buttons);
                        MyDebug.Error("Invalid Version ID", "OpenCookbook", 490);
                        break;
                }

            }

            
            needSave = false;
        }




        private void OpenCookbookVersion1(string[] args, string fileLocation)
        {
            try
            {
                int typeAmount, recipeStart, recipeAmount, ingredientAmount;
                //Adds cookbook from cookbook name
                MyDebug.Print("Processing: Name");
                AddCookbook(args[1]);
                cookbookFileLocations.Add(args[1], fileLocation);

                //Gets how many types there are in the cookbook
                MyDebug.Print("Processing: typeAmount");
                typeAmount = Convert.ToInt32(args[2]);

                //Calculate at which argument the recipes start
                recipeStart = 3 + 2 * typeAmount;

                //Loops through every type (name and recipe count) until reaches recipes
                for (int type = 3; type < (3 + 2 * typeAmount); type += 2)
                {
                    MyDebug.Print("Processing: Type " + type / 2);
                    //Adds the type based off it's name
                    MyDebug.Print("Adding type");
                    AddType(args[type]);

                    //Gets the amount of recipes in the type
                    MyDebug.Print("Processing: RecipeAmount");
                    recipeAmount = Convert.ToInt32(args[type + 1]);

                    //For each recipe in the type
                    for (int recipe = 0; recipe < recipeAmount; recipe++)
                    {
                        string name, description, utensil, location;
                        int temperature;
                        byte hours;
                        float minutes, servings;

                        MyDebug.Print("Processing: Recipe " + (recipe + 1));
                        //Creates recipe
                        MyDebug.Print("Processing: Name");
                        name = args[recipeStart];
                        MyDebug.Print("Processing: Temperature");
                        temperature = Convert.ToInt32(args[recipeStart + 1]);
                        MyDebug.Print("Processing: hours");
                        hours = Convert.ToByte(args[recipeStart + 2]);
                        MyDebug.Print("Processing: minutes");
                        minutes = Convert.ToSingle(args[recipeStart + 3]);
                        MyDebug.Print("Processing: description");
                        description = args[recipeStart + 4];
                        MyDebug.Print("Processing: utensil");
                        utensil = args[recipeStart + 5];
                        MyDebug.Print("Processing: servings");
                        servings = Convert.ToSingle(args[recipeStart + 6]);
                        MyDebug.Print("Processing: location");
                        location = args[recipeStart + 7];
                        MyDebug.Print("Creating: Recipe " + (recipe + 1));

                        if (location == null)
                            MyDebug.Print("location is null");
                        AddRecipe(name, temperature, hours, minutes, description, utensil, servings, location, false);
                        MyDebug.Print("Recipe Added");

                        //Amount of ingredients in the recipe
                        MyDebug.Print("Processing: Ingredient Amount");
                        ingredientAmount = Convert.ToInt32(args[recipeStart + 8]);

                        //For each ingredient in the recipe
                        for (int ingredient = 0; ingredient < ingredientAmount; ingredient++)
                        {
                            MyDebug.Print("Processing: Ingredient " + (ingredient + 1));
                            //Find the starting arg vaule for the ingredient 
                            int ingredientStart = recipeStart + 9     //Posistion of recipe + amount of values needed for recipe
                                                    + ingredient * 3;   //Current ingredient times the amount of values needed for ingredient

                            //Add ingredient to the last added recipe, which is the recipe currently in
                            loadedRecipes.Last().AddIngredient(args[ingredientStart],                          //Ingredient name        
                                                                args[ingredientStart + 1],    //Quantity
                                                                args[ingredientStart + 2]                       //Unit
                                                              );
                        }
                        MyDebug.Print("Finished: Ingredients for recipe " + (recipe + 1));
                        //Recalculates the recipe start based off where the ingredients stop
                        recipeStart = recipeStart + 9 + ingredientAmount * 3;
                    }
                    MyDebug.Print("Finished: Recipes");
                }
            }
            catch (FormatException e) //If the conversion from string to int or single or byte fail, indicating there is an error in the save file.
            {
                string message = "The file failed to be read. Possible corrupted data or incorrect file type.\n" + e.Message;
                string caption = "Open file error";
                MessageBoxButtons buttons = MessageBoxButtons.OK;

                MessageBox.Show(message, caption, buttons);
                MyDebug.Error(e.Message, e.Source, 490);
            }
        }



        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        #endregion CookbookIO


        #region PrintMethods
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        private void printFromRightClick(object sender, EventArgs e)
        {
            Print(loadedRecipes[currentSelectedRecipeIndex].recipePanel);
        }

        private void printRecipeToolStripItem_Click(object sender, EventArgs e)
        {
            if (currentSelectedRecipeIndex != -1)
            {
                Print(loadedRecipes[currentSelectedRecipeIndex].recipePanel);
            }
            else
            {
                string message = "There is not a recipe open to print";
                string caption = "Print error";
                MessageBoxButtons buttons = MessageBoxButtons.OK;

                MessageBox.Show(message, caption, buttons);
            }
        }

        private void printCookbookToolStripItem_Click(object sender, EventArgs e)
        {
            if (currentCookbookNode != null)
            {
                if (loadedRecipes.Count > 0)
                {
                    List<Panel> panelList = new List<Panel>();
                    foreach (Recipe rec in loadedRecipes)
                    {
                        if (rec.node.Parent.Parent == currentCookbookNode)
                        {
                            panelList.Add(rec.recipePanel);
                        }
                    }

                    if (panelList.Count > 0)
                    {
                        Print(panelList.ToArray());
                    }
                    else
                    {
                        string message = "There are no recipes in the cookbook to print";
                        string caption = "Print error";
                        MessageBoxButtons buttons = MessageBoxButtons.OK;

                        MessageBox.Show(message, caption, buttons);
                    }
                }
                else
                {
                    string message = "There are no recipes in the cookbook to print";
                    string caption = "Print error";
                    MessageBoxButtons buttons = MessageBoxButtons.OK;

                    MessageBox.Show(message, caption, buttons);
                }
            }
            else
            {
                string message = "There is not a cookbook open to print";
                string caption = "Print error";
                MessageBoxButtons buttons = MessageBoxButtons.OK;

                MessageBox.Show(message, caption, buttons);
            }
        }

        private void printShoppingListToolStripItem_Click(object sender, EventArgs e)
        {        
            if (currentSelectedRecipeIndex != -1)
            {
                MyDebug.Print("Updating Variables");
                foreach (Recipe rec in loadedRecipes)
                {
                    rec.UpdateVariables();
                    foreach (Ingredient ing in rec.ingredientList)
                    {
                        ing.UpdateVariables();
                    }
                }
                ShoppingListForm ShoppingList = new ShoppingListForm(loadedRecipes.ToArray());
                DialogResult result = ShoppingList.ShowDialog();

                if (result == DialogResult.Yes)
                {
                    ShoppingList.PrepPrint();
                    Print(ShoppingList.IngredientPanel);
                }
            }
            else
            {
                string message = "There is not a recipe open to print";
                string caption = "Print error";
                MessageBoxButtons buttons = MessageBoxButtons.OK;

                MessageBox.Show(message, caption, buttons);
            }
            
        }

        private void Print(params Panel[] panelsToPrint)
        {

            memoryImage = SaveBitmap(panelsToPrint);
            try
            {
                if (panelsToPrint.Length == 1)
                {
                    string name = panelsToPrint[1].Name;
                    if (name.Contains("ingredientPanel"))
                    {
                        name = name.Substring(15);
                    }
                    else
                    {
                        name = name.Substring(5);
                    }
                    printDocument1.DocumentName = name;
                }
                else
                {
                    printDocument1.DocumentName = currentCookbookNode.Text;
                }
            }
            catch
            {
                printDocument1.DocumentName = "MyCookbook_Recipe";
            }


            printDocument1.DefaultPageSettings.Landscape = false;
            printDocument1.DefaultPageSettings.Margins = new Margins(25, 25, 25, 25);

            PrintPreviewDialog dialog = new PrintPreviewDialog();
            //PrintDialog dialog = new PrintDialog();

            dialog.Document = printDocument1;

            pageCounter = 0;
            if (dialog.ShowDialog() == DialogResult.OK)
            {
                printDocument1.Print();
            }

        }

        public Bitmap[] SaveBitmap(params Panel[] panelsToSave)
        {
            List<Bitmap> bitmapList = new List<Bitmap>();
            foreach (Panel currentPanel in panelsToSave)
            {
                bool isEnabled = currentPanel.Enabled;
                currentPanel.Enabled = true;
                int width = currentPanel.DisplayRectangle.Width;
                int height = currentPanel.DisplayRectangle.Height;

                Bitmap bmp = new Bitmap(width, height);
                Graphics g = Graphics.FromImage(bmp);
                g.Clear(currentPanel.BackColor);
                g.Dispose();

                //currentRecPanel.DrawToBitmap(bmp, new Rectangle(0, 0, width, height));
                foreach (Control control in currentPanel.Controls)
                {
                    if (!(control is Button))
                        control.DrawToBitmap(bmp, control.Bounds);
                    if (control.HasChildren)
                    {
                        foreach (Control control2 in control.Controls)
                        {
                            Rectangle bound = new Rectangle(control.Bounds.X + control2.Location.X, control.Bounds.Y, control.Bounds.Width, control.Bounds.Height);
                            control2.DrawToBitmap(bmp, bound);
                        }
                    }
                }

                bitmapList.Add(bmp);
                currentPanel.Enabled = isEnabled;
            }

            return bitmapList.ToArray();
        }

        private void printDocument1_PrintPage(object sender, PrintPageEventArgs e)
        {
            Image i = (Image)memoryImage[pageCounter];

            Rectangle r = e.MarginBounds;

            double imageWidth = i.Width;
            double imageHeight = i.Height;
            double rectWidth = r.Width;
            double rectHeight = r.Height;

            if (imageWidth / imageHeight > rectWidth / rectHeight) // image is wider
            {
                r.Height = (int)(imageHeight / imageWidth * rectWidth);
            }
            else
            {
                r.Width = (int)(imageWidth / imageHeight * rectHeight);
            }

            e.Graphics.DrawImage(i, r);
            pageCounter++;
            e.HasMorePages = (pageCounter != memoryImage.Length);
        }

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        #endregion PrintMethods


        /// <summary>
        /// Sets the selected recipe in the tree to visible and hides the previous selected recipe
        /// Uses <paramref name="currentSelectedRecipeIndex"/>
        /// </summary>
        /// <param name="rec">The recipe to set to visible</param>
        private void SelectRecipe(Recipe rec)
        {
            if (currentSelectedRecipeIndex != -1)
            {
                MyDebug.Print(String.Format("Hiding old recipe: {0} (Index: {1})", loadedRecipes[currentSelectedRecipeIndex], currentSelectedRecipeIndex));
                loadedRecipes[currentSelectedRecipeIndex].SetVisible(false);
            }

            //MyDebug.Print("Changing the Index");
            currentSelectedRecipeIndex = rec.index;

            //MyDebug.Print("Resizing Recipe Frame");
            rec.ResizeRecipe(recipeWidth, recipeHeight);

            /*
            foreach (Recipe recipe in loadedRecipes)
            {
                foreach (Ingredient ing in recipe.ingredientList)
                {
                    MyDebug.Print(ing.ingredientNameSearchBox.searchBarTextBox.Text);
                }
            }
            */

            foreach (Recipe recipe in loadedRecipes)
            {
                foreach (Ingredient ing in recipe.ingredientList)
                {
                    if (!Ingredient.ingredientDatabase.Contains(ing.name) && ing.name != "Ingredient Name")
                    {
                        Ingredient.ingredientDatabase.Add(ing.name);
                    }
                }
            }


            MyDebug.Print(String.Format("Setting recipe \"{0}\" with index {1} to visible", rec, rec.index));
            rec.SetVisible(true);
            rec.ingredientPanel.Visible = true;

        }

        private bool checkAndTryUpdate()
        {
            string filePath = "MyCookbookSetup.msi";

            string latestVersion = AutoUpdater.CheckForUpdate();
            if (AutoUpdater.CheckVersions(Assembly.GetExecutingAssembly().GetName().Version.ToString(), latestVersion))
            {
                MyDebug.Print("Update found, asking to update");
                string message = "A new version of MyCookbook is available, do you want to install it now?";
                string caption = "Update";
                MessageBoxButtons buttons = MessageBoxButtons.YesNo;

                DialogResult result;

                result = MessageBox.Show(message, caption, buttons);

                if (result == DialogResult.Yes)
                {
                    if(File.Exists(filePath))
                    {
                        File.Delete(filePath);
                    }

                    AutoUpdater.GetUpdate(latestVersion);
                    MyDebug.Print("New versiond downloaded, running installer and closing current application");
                    Process.Start(filePath);
                    
                    return true;
                }
            }

            return false;
        }

        private void closeCurrentCookbookToolStripMenuItem_Click(object sender, EventArgs e)
        {
            closeCookbook(sender, e);
        }


        /// <summary>
        /// Checks if char is equal to new line
        /// </summary>
        /// <param name="c">Charachter to check</param>
        /// <returns>If equal to new line</returns>
        private static bool EqualsNewLine(char c)
        {
            return (c == '\n');            
        }       


    }
}

